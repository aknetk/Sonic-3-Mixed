object 0x00;

var MyX:uint32_t;
var MyY:uint32_t;
var CurrentFrame:int;
var MagnetizedTo:int;
var ShouldRingFall:bool;

event Ring() : CONSTRUCTER {
    if (SaveGame.CurrentMode == 0) {
        Sprite = LevelScene.LoadSpriteFromBin("GlobalS3K/Ring.bin");
    } else {
	    Sprite = LevelScene.LoadSpriteFromBin("Global/Ring.bin");
    }
    ShouldRingFall = false;
}

event Create() {    
	Active = true;
    Timer = 0xFF;
    CleanupInactiveObject = true;
	
	MyX = 0;
	MyY = 0;
	CurrentAnimation = Sprite.FindAnimation("Normal Ring");
	CurrentFrame = 0;
	MagnetizedTo = -1;
}

event Update() {
	
	if (!isHeldDebugObject)
	{
		    // If bouncing ring:
    if (MagnetizedTo < 0) {
        YSpeed += 0x18;

        if (YSpeed > 0) {
            if (Scene.CollisionAt(X, Y + 8)) {
                Y -= YSpeed >> 8;
                YSpeed = -YSpeed * 3 / 4;
            }
        }
        if (YSpeed < 0) {
            if (Scene.CollisionAt(X, Y - 8)) {
                Y -= YSpeed >> 8;
                YSpeed = 0;
            }
        }

        if (XSpeed > 0) {
            if (Scene.CollisionAt(X + 8, Y)) {
                X -= XSpeed >> 8;
                XSpeed = -XSpeed / 4;
            }
        }
        if (XSpeed < 0) {
            if (Scene.CollisionAt(X - 8, Y)) {
                X -= XSpeed >> 8;
                XSpeed = -(XSpeed / 4);
            }
        }

        if (ShouldRingFall) {
            Timer--;
        }

        if (CurrentAnimation < Sprite.Animations.size()) {
            if (CurrentFrame / 0x100 >= Sprite.Animations[CurrentAnimation].FrameCount - 1) {
                CurrentFrame = Sprite.Animations[CurrentAnimation].FrameToLoop * 0x100;
            }

            if (Sprite.Animations[CurrentAnimation].AnimationSpeed == 4) {
                CurrentFrame += 0x100;
            } else if (Sprite.Animations[CurrentAnimation].AnimationSpeed > 2) {
                CurrentFrame += Sprite.Animations[CurrentAnimation].AnimationSpeed;
            } else if (Sprite.Animations[CurrentAnimation].Frames[CurrentFrame / 0x100].Duration != 0) {
                CurrentFrame += 0x100 / Sprite.Animations[CurrentAnimation].Frames[CurrentFrame / 0x100].Duration;
            }
        }
    }
    // If magnetized to a player
    else {
        var PX:int;
        var PY:int;
		PX = (Scene.Players[MagnetizedTo].EZX);
		PY = (Scene.Players[MagnetizedTo].EZY);

        if (Scene.Players[MagnetizedTo].Shield != ShieldType.Electric) {
            MagnetizedTo = -1;
        }

        if (PX < X) {
            if (XSpeed < 0) {
                XSpeed -= 0x30;
            } else {
                XSpeed -= 0xC0;
            }
        } else {
            if (XSpeed > 0) {
                XSpeed += 0x30;
            } else {
                XSpeed += 0xC0;
            }
        }
        if (PY < Y) {
            if (YSpeed < 0) {
                YSpeed -= 0x30;
            } else {
                YSpeed -= 0xC0;
            }
        } else {
            if (YSpeed > 0) {
                YSpeed += 0x30;
            } else {
                YSpeed += 0xC0;
            }
        }

        if (SaveGame.CurrentMode == 1) {
            CurrentFrame = Scene.RingAnimationFrame;
        } else {
            CurrentFrame = Scene.RingAnimationFrame >> 2;
        }
    }

    MyX += XSpeed;
    MyY += YSpeed;
    
    if (ShouldRingFall) {
        X = MyX >> 8;
        Y = MyY >> 8;
    }

    if (Timer == 0) {
        Active = false;
    }
	}
}

event Render(CamX:int, CamY:int) {
    if (ShouldRingFall && Timer < 64 && ((Timer >> 1) & 1) == 0) {
        return;
    }
	if (CurrentAnimation <= -1) {
		return;
	}

    G.DrawSprite(Sprite, CurrentAnimation, CurrentFrame >> 8, X - CamX, Y - CamY, 0, IE_NOFLIP);
    
	if (DrawCollisions) {
		G.SetDrawAlpha(0x80);
		G.DrawRectangle(X - (W / 2) - CamX, Y - (H / 2) - CamY, W, H, DrawNoCollisionsColor);
		G.SetDrawAlpha(0xFF);
	}
}

event OnCollisionWithPlayer(PlayerID:int, HitFrom:int, Data:int) : int {
    if (Scene.Players[PlayerID].RingAlarm > 0) return 0;

    Scene.Players[PlayerID].GiveRing(1);
    Sound.Play(Sound.SFX_RING);

    var rx:int[3];
    var ry:int[3];
	rx[0] = -4;
	rx[1] = 1;
	rx[2] = 4;
	ry[0] = 1;
	ry[1] = -2;
	ry[2] = 3;
	/*
    if (SaveGame.CurrentMode == 1) {
        for (int i = 0; i < 3; i++) {
            Explosion* ringsparkle;
            ringsparkle = new Explosion();
            ringsparkle.G = G;
            ringsparkle.App = App;
            ringsparkle.CurrentAnimation = 9;
            ringsparkle.FlipX = false;
            ringsparkle.Active = true;
            ringsparkle.Sprite = Sprite;
            ringsparkle.X = X + rx[i];
            ringsparkle.Y = Y + ry[i];
            Scene.Explosions.push_back(ringsparkle);
        }
    } else {
        Explosion* ringsparkle;
        ringsparkle = new Explosion();
        ringsparkle.G = G;
        ringsparkle.App = App;
        ringsparkle.CurrentAnimation = 9;
        ringsparkle.FlipX = false;
        ringsparkle.Active = true;
        ringsparkle.Sprite = Sprite;
        ringsparkle.X = X;
        ringsparkle.Y = Y;
        Scene.Explosions.push_back(ringsparkle);
    }*/

    Active = false;
    return 1;
}