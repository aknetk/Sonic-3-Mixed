object 0x98;

subclass Enemy;

var Flip:int;
var SubX:int;

event Create() {
    Active = true;
    Priority = false;

    W = 32;
    H = 32;

    CurrentAnimation = 14;

    Flip = 1;
    SubX = 0;
    
    if (FlipX)
        Flip = -1;

    Timer = 0;

    HitCount = 1;

    
}

event OnHit() : int {
    return OnDeath();
}

event Update() {

	if (!isHeldDebugObject)
	{
		    SubX = (SubX + 1) & 3;
    if (SubX == 3)
        X += Flip;
    if (X >= InitialX + SubType)
        Flip = -1;
    if (X <= InitialX - SubType)
        Flip = 1;

    Y = InitialY + (G.MyCos[(Timer << 1) & 0xFF] * 3);

    Timer = (Timer + 1) & 0x1FF;

	if (Sprite.Animations.size() > CurrentAnimation)
	{
		    if (Sprite.Animations[CurrentAnimation].AnimationSpeed > 2)
        Frame += Sprite.Animations[CurrentAnimation].AnimationSpeed;
    else if (Sprite.Animations[CurrentAnimation].Frames[Frame >> 8].Duration != 0)
        Frame += 0x100 / Sprite.Animations[CurrentAnimation].Frames[Frame >> 8].Duration;

    if (Frame >= Sprite.Animations[CurrentAnimation].FrameCount << 8) {
        Frame = Sprite.Animations[CurrentAnimation].FrameToLoop << 8;
    }
	}

    if (Frame >> 8 == 0)
        Hurting = false;
    else
        Hurting = true;
	}
}

event Render(CamX:int, CamY:int) {
        G.DrawSprite(Sprite, CurrentAnimation, Frame >> 8, X - CamX, Y - CamY, 0, Flip < 0 ? IE_NOFLIP : IE_FLIPX);
    
					if (App.viewObjectCollision) {
		G.SetDrawAlpha(0x80);
		G.DrawRectangle(X - (W / 2) - CamX, Y - (H / 2) - CamY, W, H, DrawCollisionsColor);
		G.SetDrawAlpha(0xFF);
		}
}
