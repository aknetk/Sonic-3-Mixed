object 0x2A;

var PieceVels:Sint16[64];
var BreakableFromTop:bool;

event Create() {
    Active = true;
    Priority = false;

    Solid = true;
    Scene.AddSelfToRegistry(this, "Solid");

    BreakableFromTop = false;
    if (SubType == 1)
        BreakableFromTop = true;

    W = 32;
    H = 80;

    var i:int = 0;
    switch (Scene.ZoneID) {
        case 1: // AIZ
            if (Scene.Act == 2)
                H = 88;

            VisualLayer = 1;

            // dc.w \$([A-F0-9]+)
            // Rock0Vels[i++] = 0x$1;

            i = 0;
            PieceVels[i++] = 0xFF00; PieceVels[i++] = 0xFE00;
    		PieceVels[i++] = 0x0100; PieceVels[i++] = 0xFE00;
    		PieceVels[i++] = 0xFF20; PieceVels[i++] = 0xFE40;
    		PieceVels[i++] = 0x00E0; PieceVels[i++] = 0xFE40;
    		PieceVels[i++] = 0xFF40; PieceVels[i++] = 0xFE80;
    		PieceVels[i++] = 0x00C0; PieceVels[i++] = 0xFE80;
    		PieceVels[i++] = 0xFF60; PieceVels[i++] = 0xFEC0;
    		PieceVels[i++] = 0x00A0; PieceVels[i++] = 0xFEC0;
    		PieceVels[i++] = 0xFF80; PieceVels[i++] = 0xFF00;
    		PieceVels[i++] = 0x0080; PieceVels[i++] = 0xFF00;
    		PieceVels[i++] = 0xFFA0; PieceVels[i++] = 0xFF40;
    		PieceVels[i++] = 0x0060; PieceVels[i++] = 0xFF40;

            CurrentAnimation = 8;
            if (Scene.Act == 2)
                CurrentAnimation = 9;
            break;
        case 4: // CNZ
            W = 64;
            H = 64;
            CurrentAnimation = 12;
            break;
        case 5: // ICZ
            W = 32;
            H = 64;
            CurrentAnimation = 3;
            BreakableFromTop = true;
            break;
        case 6: // LBZ
            W = 64;
            H = 64;
            CurrentAnimation = 4;
            break;
        case 7: // MHZ
        case 8: // LBZ
            W = 32;
            H = 32;
            break;
        case 9: // SOZ
            W = 32;
            H = 32;
            break;
        case 10: // LRZ
        case 11: // HPZ
        case 12: // SSZ
        case 13: // DEZ
        case 14: // DDZ
            break;
    }

    BreakableByJump = CollideSide.BOTTOM;
    if (BreakableFromTop)
        BreakableByJump = CollideSide.TOP;
    else
        BreakableBySpring = CollideSide.BOTTOM;
    BreakableByRoll = BreakableByJump;
    Scene.AddSelfToRegistry(this, "Breakable");
}

event BreakAIZ(HitSide:int) {
    if (Scene.ZoneID != 1) return;

    var w:int = 2;
    var h:int = 6;
    var x:int = X - w * 8;
    var y:int = Y + H / 2 - h * 16;
	var:int left;
	var:int top;
	var:int top2;
	if (CurrentAnimation < Sprite.Animations.size())
	{
		left = Sprite.Animations[CurrentAnimation].Frames[Frame].X;
		top = Sprite.Animations[CurrentAnimation].Frames[Frame].Y;
		top2 = Sprite.Animations[CurrentAnimation].Frames[Frame].Y;
	}
    var toph:int = 16;

    for (var i:int = 0; i < w; i++) {
        for (var j:int = 0; j < h; j++) {
            toph = 16;
            top2 = top + 88 - h * 16 + j * 16;
            if (top2 < top) {
                toph = top - top2;
                top2 = top;
            }

            if (FlipX) {
                Scene.AddMovingSprite(Sprite,
                    x + i * 16, y + j * 16 + 16 - toph,
                    left + (w - 1 - i) * 16, top2,
                    16, toph,
                    0, 0, FlipX, false, PieceVels[(i + j * w) * 2], PieceVels[(i + j * w) * 2 + 1], 0x18, 0);
            }
            else {
                Scene.AddMovingSprite(Sprite,
                    x + i * 16, y + j * 16 + 16 - toph,
                    left + i * 16, top2,
                    16, toph,
                    0, 0, FlipX, false, PieceVels[(i + j * w) * 2], PieceVels[(i + j * w) * 2 + 1], 0x18, 0);
            }
        }
    }
}

event Render(CamX:int, CamY:int) {
    if (!Solid) return;

    if (CurrentAnimation >= 0)
        G.DrawSprite(Sprite, CurrentAnimation, 0, X - CamX, Y - CamY, 0, IE_NOFLIP);
    else
        G.DrawRectangle(X - W / 2 - CamX, Y - H / 2 - CamY, W, H, 0xFF0000);
}

event OnBreakVertical(PlayerID:int, HitFrom:int) : int {
    if (PlayerID != 0) return 0;
    if (Scene.Players[PlayerID].EZX > X + W / 2 - 2) return 0;
    if (Scene.Players[PlayerID].EZX < X - W / 2 + 2) return 0;

    if (BreakableFromTop  && HitFrom == CollideSide.BOTTOM) return 0;
    if (!BreakableFromTop && HitFrom == CollideSide.TOP) return 0;

    Sound.Play(Sound.SFX_COLLAPSE);

    BreakableByRoll = CollideSide.NONE;
    BreakableByJump = CollideSide.NONE;
    BreakableByGlide = CollideSide.NONE;
    BreakableBySpring = CollideSide.NONE;
    BreakableByKnuckles = CollideSide.NONE;
    Solid = false;

    if (Scene.ZoneID == 1) BreakAIZ(HitFrom);

    return 1;
}
