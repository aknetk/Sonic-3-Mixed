object 0xAF;

var Type:int;
var State:int;
var TimerAction:int;

var FloorY:int;

event CrushingColumn() : CONSTRUCTER { 
    BinIndex = LevelScene.LoadSpriteBin("ICZ/Wall and Column.bin");
}

enum PillarType {
    UNKNOWN,
    CEILING_CRUSH,
    CEILING_CRUSH_PERIODIC,
    FLOOR_CRUSH,
    FLOOR_CRUSH_PERIODIC,
    STATIONARY_KNUX_ONLY,
}
enum PillarState {
    INIT,
    WAIT,
    MOVE_TOWARDS_CRUSH,
    BLOCK,
    BACK_AWAY
}
enum PillarAction {
    WAITACTION,
    //subtype 1, 2
    MOVE_UPACTION,
    //subtype 3, 5
    BLOCKACTION,
    //subtype 4
    CRUSH_DOWNACTION
}

event Create() {
    Active = true;
    Priority = true;

    Solid = true;
    Scene.AddSelfToRegistry(this, "Solid");

    W = 64;
    H = 224;

    CurrentAnimation = Sprite.FindAnimation("Wall and Column");

    YSpeed = 0;
    Type = SubType;
	State = PillarState.INIT;

    if (X < 0x3880) {
        FloorY = 0x680;
    } else if (X < 0x3AE0) {
        FloorY = 0x700;
    } else if (X < 0x47D0) {
        FloorY = 0x6E0;
    } else if (X < 0x4880) {
        FloorY = 0x670;
    } else if (X < 0x4D70) {
        FloorY = 0xF8;
    } else if (X < 0x4EF0) {
        FloorY = 0x178;
    } else if (X < 0x4FF0) {
        FloorY = 0x180;
    } else if (X < 0x5100) {
        FloorY = 0x1B8;
    } else if (X < 0x5240) {
        FloorY = 0x400;
    } else if (X < 0x52A0) {
        FloorY = 0x400;
    } else if (X < 0x5F70) {
        FloorY = 0xF8;
    } else if (X < 0x6070) {
        FloorY = 0x178;
    } else if (X < 0x6980) {
        FloorY = 0x300;
    }

    if (Type == PillarType.STATIONARY_KNUX_ONLY && Scene.Player.Character != CharacterType.Knuckles) {
        Active = false;
    }
}

event Update() {
    switch (State) {
        case PillarState.INIT:
            if (Type == PillarType.FLOOR_CRUSH) {
                State = PillarState.WAIT;
            }
            else if (Type == PillarType.FLOOR_CRUSH_PERIODIC) {
                State = PillarState.WAIT;
                Timer = 0x5F;
                TimerAction = PillarAction.CRUSH_DOWNACTION;
            }
            break;
        case PillarState.WAIT:
            YSpeed = 0;
            if (Type == PillarType.FLOOR_CRUSH) {
                if (Scene.Player.X < X) {
                    if (Y > InitialY)
                        YSpeed = -0x100;
                }
                if (Scene.Player.X > X + W / 2 + 16 && Y + H / 2 < FloorY) {
                    State = PillarState.MOVE_TOWARDS_CRUSH;
                    YSpeed = 0x800;
                }
            }
            break;
        case PillarState.MOVE_TOWARDS_CRUSH:
            if (Y + H / 2 >= FloorY) {
                YSpeed = 0x00;
                State = PillarState.WAIT;
                if (OnScreen) {
					Sound.Play(Sound.SFX_IMPACT4);
                    Scene.ShakeTimer = 6;
				}

                if (Type == PillarType.FLOOR_CRUSH_PERIODIC) {
                    Timer = 0x1F;
                    TimerAction = PillarAction.MOVE_UPACTION;
                }
            }
            break;
        case PillarState.BACK_AWAY:
            if (Type == PillarType.FLOOR_CRUSH_PERIODIC) {
                if (Y > InitialY) {
                    YSpeed = -0x100;
                }
                else {
                    YSpeed = 0;
                    State = PillarState.INIT;
                }
            }
            break;
        case PillarState.BLOCK:
            break;
    }

    if (Timer > 0) {
        Timer--;

        if (Timer == 0) {
            Timer = -1;
            switch (TimerAction) {
                case PillarAction.MOVE_UPACTION:
                    State = PillarState.BACK_AWAY;
                    break;
                case PillarAction.CRUSH_DOWNACTION:
                    State = PillarState.MOVE_TOWARDS_CRUSH;
                    YSpeed = 0x800;
                    break;
            }
        }
    }
}

event Render(CamX:int, CamY:int) {
    if (!Visible) {return;}
	if (DrawCollisions) {
		G.SetDrawAlpha(0x80);
		G.DrawRectangle(X - CamX, Y - CamY, W, H, DrawCollisionsColor);
		G.SetDrawAlpha(0xFF);
	} 
	G.DrawSprite(Sprite, CurrentAnimation, Frame, X - CamX, Y - CamY, 0, IE_NOFLIP);
}

event OnCollisionWithPlayer(PlayerID:int, HitFrom:int, Data:int) : int {
    if (State != PillarState.MOVE_TOWARDS_CRUSH) return 0;
    if (HitFrom == CollideSide.TOP && Visible) {
        //if (SubType == 1) //Stuff
    }
	else {
			//Anti-Stuff
	}

    if (Scene.Players[PlayerID].Ground && HitFrom == CollideSide.BOTTOM) {
        Scene.Players[PlayerID].Die(false);
    }
    return 1;
}
