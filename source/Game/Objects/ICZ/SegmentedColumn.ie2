object 0xB3; 

var Stubs:Object[4];
var BreakTimer:int;
var SolidList:bool[4];
var SolidCount:int;
var Stub:Object;
var YStack:int;

event Create() {
    Active = true;
    Priority = false;
    //W = 0;
    //H = 0;
    for (var i:int = 0; i < 4; i++) {
        Stubs[i] = Scene.AddNewObject(Obj_SegmentedColumnStub, i == 3 ? (SubType == 0 ? 1 : 2) : 0, X, Y - (i * 32), false, false);
        SolidList[i] = Stubs[i].Solid;
    }
    BreakTimer = 0;
}

event Update() {
    BreakTimer = BreakTimer == 0 ? 0 : BreakTimer - 1;
    //IApp.Print(0, "%d", BreakTimer);
    SolidCount = 0;
    for (var i:int = 0; i < 4; i++) {
        SolidCount = SolidList[i] ? SolidCount + 1 : SolidCount;
        if (SolidList[i] != Stubs[i].Solid) {
            SolidCount--;
            BreakTimer = 30 + (SolidCount * 8);
        }
        SolidList[i] = Stubs[i].Solid;
    }
    for (var i:int = 0; i < 4; i++) {
        if (Stubs[i].Solid && Stubs[i].SubType != 2 && BreakTimer == 0) {
            Stubs[i].BreakableByRoll = CollideSide.SIDES;
            Scene.AddSelfToRegistry(Stubs[i], "Breakable");
            break;
        }
    }
    if (BreakTimer <= (SolidCount * 8) && BreakTimer != 0) {
        Stub = Stubs[(32 - BreakTimer) / 8];
        Stub.Y += 4;
        YStack += 4;
        if (YStack == 32) {
            Sound.Play(Sound.SFX_IMPACT5);
            YStack = 0;
        }
    }
}